def executeSQLCommand (sql_command):

    ##### Connect to the MySQL DB #####

    password = "Uniisttoll123" # this is your MySQL database password, NOT the password you use when you log into PythonAnywhere! I told you to write it down somewhere... >:->
    results = ()

    # you'll find the info you need to enter in your Databases Tab on PythonAnywhere
    db = MySQLdb.connect("Wichelhaus.mysql.pythonanywhere-services.com","Wichelhaus",password, "Wichelhaus$EmployeeDB")

    cursor = db.cursor()

    try:
        cursor.execute(sql_command)  # Execute the SQL command
        results = cursor.fetchall()  # Fetch all the rows in a list of lists.
        db.commit() # only necessary if the command changes the DB, but hey...
    except:
        db.rollback() # if stuff went wrong, no change to the DB should be made
        print ("+++++++++ Error: unable to fetch data from database")
    db.close()

    return results


def eventiTable(Eventi_from_db):
    Eventi_table_string = ""
    for Eventis_record in Eventi_from_db:
        # a record is a LIST of values (one value per column), so we need to access each value separately.
        # This follows the sequence in the SELECT statement above, starting with 0!
        Event_Name = str (Eventis_record[0])
        Event_Type = str (Eventis_record[1])
        Host = str (Eventis_record[2])
        Participants = str (Eventis_record[3])
        Date_And_Time = str (Eventis_record[4])
        Location = str (Eventis_record[5])
        Price = str (Eventis_record[6])
        Email = str (Eventis_record[7])

        Eventi_table_string += "<tr>"
        Eventi_table_string += "<td>" + Event_Name + "</td>"
        Eventi_table_string += "<td>" + Event_Type + "</td>"
        Eventi_table_string += "<td>" + Host + "</td>"
        Eventi_table_string += "<td>" + Participants + "</td>"
        Eventi_table_string += "<td>" + Date_And_Time + "</td>"
        Eventi_table_string += "<td>" + Location + "</td>"
        Eventi_table_string += "<td>" + Price + "</td>"
        Eventi_table_string += "<td>" + Email + "</td>"
        Eventi_table_string += "<tr>"

        print ("++++++++++++++++++", Event_Name, Event_Type, Host, Participants, Date_And_Time, Location, Price, Email)

    return Eventi_table_string


def userInput(HttpQuery, request):

    userinput_Event_Name = HttpQuery.get('Event_Name', ['%'])[0]

    userinput_Event_Type = HttpQuery.get('Event_Type', ['%'])[0]

    userinput_Host = HttpQuery.get('Host', ['%'])[0]

    userinput_Participants = HttpQuery.get('Participants', ['%'])[0]

    userinput_Date_And_Time = HttpQuery.get('Date_And_Time', ['%'])[0]

    userinput_Location = HttpQuery.get('Location', ['%'])[0]

    userinput_Email = HttpQuery.get('Email', ['%'])[0]

    userinput_Price = HttpQuery.get('Price', ['%'])[0]

    if request == 'insert':
        sql_cmd = "INSERT INTO Eventi (Event_Name, Event_Type, Host, Participants, Date_And_Time, Location, Email, Price ) VALUES ('" +userinput_Event_Name+"', '"+userinput_Event_Type+"', '"+userinput_Host+"', '"+str(userinput_Participants)+"','"+str(userinput_Date_And_Time)+"', '"+userinput_Location+"',  '"+userinput_Email+"', '"+str(userinput_Price)+"')"

    elif request == 'delete':
        sql_cmd = "SELECT Eventi.Event_Name, Eventi.Event_Type, Eventi.Host, Eventi.Participants, Eventi.Date_And_Time, Eventi.Location, Eventi.Email, Eventi.Price FROM Eventi AND Eventi.Event_Name LIKE '"+userinput+"'"

    return sql_cmd


def eventContent(typeEvent, action, HttpQuery):
    if action == 'Event':
        print ("############" + typeEvent + "page#############")
        sql_cmd = "SELECT * FROM Eventi WHERE Event_Type ='"+typeEvent+"'"

    elif action == 'Search':
        print ("###################  SEARCH PAGE ########################")
        userinput_search = HttpQuery.get('Search', ['%'])[0]

        # send a SQL command (selecting the wanted messages from the Message Table) to the SQL Server
        sql_cmd = "SELECT * FROM Eventi WHERE (Event_type='"+typeEvent+"' AND Event_Name LIKE '"+userinput_search+"')"

    print ("+++++++++++ SQL command +++++ ", sql_cmd)

    content = pageStart + "LiveLoveParty - Join an event at a " + typeEvent + backgroundSidebar + titleEvent + "Join an event - " + typeEvent + eventPageContent
    content += """<input type="submit" value="Search name of Event">"""
    content += eventTableStart + eventiTable(executeSQLCommand(sql_cmd)) + eventTableEnd

    return content


##### Main funfction #####

def application(environ, start_response):
    if environ.get('PATH_INFO') == '/':
        status = '200 OK'
        content = pageStart + "LiveLoveParty" + backgroundSidebar + homepage

    elif environ.get('PATH_INFO') == '/joinevent':
        status = '200 OK'
        content = pageStart + "LiveLoveParty - Join an event" + backgroundSidebar + joinevent

        #construct an HTML that has the results from the SELECT statment mixed in

    elif environ.get('PATH_INFO') == '/hostevent':
        status = '200 OK'
        # connet to SQL data base
        sql_cmd = "SELECT Eventi.Event_Name, Eventi.Event_Type, Eventi.Host, Eventi.Participants, Eventi.Date_And_Time, Eventi.Location, Eventi.Email, Eventi.Price FROM Eventi"
        print ("++++++++++++++++++", sql_cmd)

        content = pageStart + "LiveLoveParty - Host an event" + backgroundSidebar + hosteventStart + eventiTable(executeSQLCommand(sql_cmd)) + hosteventEnd

    elif environ.get('PATH_INFO') == '/about':
	    status = '200 OK'
	    content = pageStart + "LiveLoveParty - About us" + backgroundSidebar + about

    elif environ.get('PATH_INFO') == '/Insert':
        status = '200 OK'
        print ("###################  INSERT PAGE ########################")

        userInput(parse_qs(environ['QUERY_STRING']), 'insert')

        # construct the SQL command (this time it's an INSERT statement)

        print ("+++++++++++ SQL command +++++ ", userInput(parse_qs(environ['QUERY_STRING']), 'insert'))
        executeSQLCommand(userInput(parse_qs(environ['QUERY_STRING']), 'insert'))

        sql_cmd = "SELECT Eventi.Event_Name, Eventi.Event_Type, Eventi.Host, Eventi.Participants, Eventi.Date_And_Time, Eventi.Location, Eventi.Email, Eventi.Price FROM Eventi"

        content = pageStart + "LiveLoveParty - Host an event" + backgroundSidebar + hosteventStart + eventiTable(executeSQLCommand(sql_cmd)) + hosteventEnd

    elif environ.get('PATH_INFO') == '/Delete':
        status = '200 OK'
        print ("###################  DELETE PAGE ########################")

        # construct the SQL command (this time it's a DELETE statement)

        print ("+++++++++++ SQL command +++++ ", userInput('delete'))
        executeSQLCommand(sql_cmd)

        # sql_cmd = "DELETE FROM Eventi WHERE Eventi.Event_Name LIKE '"+userinput_delete_Event_Name"'"

        #database_delete = database_delete1 + experience_table_string + database_delete2
        #content = database_delete


    elif environ.get('PATH_INFO') == '/club':
        status = '200 OK'
        content = eventContent('Club', 'Event', '')

    elif environ.get('PATH_INFO') == '/club/Search':
        status = '200 OK'
        content = eventContent('Club', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/bar':
        status = '200 OK'
        content = eventContent('Bar', 'Event', '')

    elif environ.get('PATH_INFO') == '/bar/Search':
        status = '200 OK'
        content = eventContent('Bar', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/art':
        status = '200 OK'
        content = eventContent('Art gallery', 'Event', '')

    elif environ.get('PATH_INFO') == '/art/Search':
        status = '200 OK'
        content = eventContent('Art gallery', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/dinner':
        status = '200 OK'
        content = eventContent('Dinner', 'Event', '')

    elif environ.get('PATH_INFO') == '/dinner/Search':
        status = '200 OK'
        content = eventContent('Dinner', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/houseparty':
        status = '200 OK'
        content = eventContent('House party', 'Event', '')

    elif environ.get('PATH_INFO') == '/houseparty/Search':
        status = '200 OK'
        content = eventContent('House party', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/gamenight':
        status = '200 OK'
        content = eventContent('Game night', 'Event', '')

    elif environ.get('PATH_INFO') == '/gamenight/Search':
        status = '200 OK'
        content = eventContent('Game night', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/karaoke':
        status = '200 OK'
        content = eventContent('Karaoke', 'Event', '')

    elif environ.get('PATH_INFO') == '/karaoke/Search':
        status = '200 OK'
        content = eventContent('Karaoke', 'Search', parse_qs(environ['QUERY_STRING']))


    elif environ.get('PATH_INFO') == '/concert':
        status = '200 OK'
        content = eventContent('Concert', 'Event', '')

    elif environ.get('PATH_INFO') == '/conert/Search':
        status = '200 OK'
        content = eventContent('Concert', 'Search', parse_qs(environ['QUERY_STRING']))


    else:
        status = '404 NOT FOUND'
        content = '<h1>Page could not be found. </h1>'

    response_headers = [('Content-Type', 'text/html'), ('Content-Length', str(len(content)))]
    start_response(status, response_headers)
    yield content.encode('utf8')

